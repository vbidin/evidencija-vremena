##########
#ENTITETI#
##########

Svaka baza podataka sastoji se od skupa entiteta.
Entitet predstavlja bilo kakav stvarni ili apstraktni pojam čije podatke možemo i želimo trajno pohraniti. U sklopu baza podataka, entitete fizički predstavljaju tablice baze podataka. Svaki entitet se razlikuje od svih ostalih entiteta. Na primjer, osobu koja pohađa određeno sveučilište možemo definirati kao entitet. Entitet ne treba nužno biti živo biće ili dio stvarnog svijeta, on takoder može biti apstraktan koncept kao što je narudžba hrane, ili rezervacija sobe. 

Svaki entitet se sastoji od atributa, te n-torki (članovi entiteta).
Ako se grafički entitet predoči kao tablica, stupci te tablice bili bi atributi entiteta, a svaki red tablice predstavljao bi jednog jedinstvenog člana entiteta. Naprimjer, ako entitet opisuje osobu, onda bi njezini atributi mogli bili: OIB, ime, prezime, datum rođenja, mjesto rođenja. Tada bi za svaku osobu bio definiran skup vrijednosti koji odgovora skupu atributa entiteta, naprimjer: "012390123812", "Pero", "Perić", "23.7.1987.", "Zagreb". Svaki atribut je određeni tip podataka: u slučaju imena ili prezimena to je običan niz slova, ali atribut mogu također biti brojevi, datumi, decimalni brojevi sa određenim stopama preciznosti, nizovi bitovi itd. Svaki skup vrijednosti jednog člana entiteta mora odgovarati po tipovima podataka skupu atributa. Naprimjer, ako je atribut 'mjesto rođenja' definiran kao niz znakova, onda se kao vrijednost tog atributa ne može unesti broj ili niz bitova, već samo niz znakova. U ovom slučaju, entitet bi mogli predočiti kao sljedeću tablicu:

--- SLIKA ENTITETA SA ATRIBUTIMA ---

Važno je uočiti da više n-torki jednog entiteta može imati iste vrijednosti atributa. Naprimjer, više osoba može kao mjesto rođenja imati Zagreb. Međutim, važno svojstvo svakog člana entiteta je da je on jedinstven. To znači da za svaki entitet mora postojati skup atributa (ili samo jedan atribut) koji jednoznačno određuje svaki član. Tada ne smije postojati više članova koji za taj jedinstveni skup atributa imaju jednake vrijednosti.

Taj skup atributa koji jednoznačno određuje jednu n-torku entiteta zove se PRIMARNI KLJUČ. U slučaju sa entiteom Osoba dobar odabir za primarni ključ bio bio 'OIB' pošto znamo sa sigurnošću da svaka osoba ima jedinstveni OIB. Primarni ključ obično se grafički prikazuje podcrtavanjem atributa koje obuhvaća:

--- SLIKA ENTITETA SA PODCRTANIM PRIMARNIM KLJUČEM ---

Moguće je i da n-torku jednoznačno određuje više atributa. Naprimjer, u slučaju entiteta 'Ispit', koji predstavlja ispite iz određenog predmeta kojima su pristupili određeni studenti entitet bi mogla izgledati ovako:

--- SLIKA ENTITETA SA ATRIBUTIMA ---

Sada nije toliko lagalno odrediti primarni ključ pošto nemamo unikatni atribut kao što je bio slučaj za entitet 'Osoba'. Međutim, moguće je jednoznačno definirati svaki član ispita sa skupom atributa: 'Predmet', 'Osoba', te 'Datum polaganja'. 'Predmet' definira iz kojeg predmeta se održavao ispit, a 'Osoba' definira osobu koja je pristupila ispitu. Ako uzmemo u obzir da ista osoba može više puta pristupiti ispitu za jedan predmet, možemo u skup dodati i atribut 'Datum polaganja'. Ovakav primarni ključ zove se KOMPOZITNI KLJUČ, pošto se sastoji od kompozicije više atributa.

--- SLIKA ENTITETA SA KOMPOZITNIM KLJUČEM ---

Moguće je također u postojeći entitet dodati novi atribut, naziva 'ID', koji samo predstavlja identifikator svake n-torke entiteta, a osim toga ne nosi nikavku informaciju. U tom slučaju možemo kao primarni ključ koristiti isključivo samo taj atribut, umjesto da koristimo 'prirodni' kompozitni ključ. Takav tip ključa zove se SUROGATNI KLJUČ.

--- SLIKA ENTITETA SA SUROGATNIM KLJUČEM ---

######
#VEZE#
######

Veza je odnos između 2 ili više entiteta. 
Na primjer ako želimo definirati u bazi podataka da određena osoba ima određeni grad kao svoje mjesto rođenja, možemo za svaku osobu evidentirati njeno mjesto rođenja. Ako samo unutar relacije 'Osoba' dodamo atribut koji se zove 'Mjesta rođenja', za svaku osobu bi vrijednost tog atributa bila naziv grada. Međutim, ako više djelatnika dijele isti grad kao njihovo mjesto rođenja, naprimjer 'Pero' i 'Ivan' su oboje rođeni u istom gradu, u bazi podataka za svakog od njih kao vrijednost za 'Mjesto rođenja' bit će vrijednost "Zagreb". Osim mjesta rođenja moguća je potreba za evidentiranjem drugih stvari, kao što je prebivalište. U tom slučaju morali bi za svakog zaposlenika definirati dodatno i prebivalište. Ako na taj način evidentiramo podatke u bazi podataka doći će do redundancije. Više zaposlenika može imati kao vrijednost svojih atributa iste vrijednosti, naprimjer 10 osoba može kao mjesto rođenja imati definiran isti grad. Poželjno je na neki način razdvojiti sve takve duplikate na način da osobe mogu umjesto dupliciranja 'djeliti' mjesto rođenja. Tu do izražaja dolazi veza. Želimo razdvojiti podatke vezane uz grad iz relacije zaposlenik u zasebni entitet 'Grad'. Na taj način možemo osigurati da su gradovi skup, te da ne dolazi do ponavljanja istog grada, odnosno da ne dolazi do redundancije. Tada u bazi možemo modelirati vezu između entiteta Osoba i entiteta Grad koja se zove 'Mjesto rođenja', odnosno 'Mjesto prebivališta'. Na tu vezu gledamo na isti način kao i na entitet. Ona će također imati svoje atribute te primarni ključ. U ovom slučaju veza bi mogla izgledati ovako (veza se obično prikazuje sa rombom):

--- SLIKA VEZE IZMEĐU ENTITETA OSOBA I GRAD ---

Primarni ključ veze je u ovom slučaju kompozitni ključ, koji se sastoji od primarnog ključa osobe (OIB), te primarnog ključa grada (poštanski broj). Na ovaj način jednoznačno smo omogućili u bazi da više osoba ima kao mjesto rođenja isti grad (i time izbjegli redundanciju). Oznake između veza i entiteta označavaju kardinalonost veze. Kardinalnost označava broj entiteta koji mogu biti asocirani sa drugim entitetom preko veze. U ovom slučaju kardinalnost je N-1, što označava da više osoba može bit vezano sa jednim gradom preko te veze, ali ne i obratno. Više osoba može imati isto mjesto rođenja, ali ne i obratno. Kardinalnosti mogu biti:

--- TABLICA/SLIKA KARDINALNOSTI ---

Iz slike se vidi da jedan entitet (odnosno veza) može sadržavati atribut (ili skup atributa) koji su primarni ključ neke druge relacije. Skup takvih atributa zove se STRANI KLJUČ. Veze i strani ključevi omogućuju nam da povežemo entitete baze podataka u logički smislenu cjelinu.

######################
#Izrada baze podataka#
######################

1. OPIS PROBLEMA
Općenito, problem je sljedeći:
Potrebno je napraviti web aplikaciju koji omogućuje korisnicima, odnosno studentima, da evidentiraju vrijeme koje su utrošili tijekom studija na aktivnosti kao što su direktna nastava, učenje, te ostale nastavne obaveze studenata. Sustav također mora omogućiti korisnicima da pregledavaju utrošeno vrijeme te da uspoređuju stvarno utrošeno vrijeme sa vremenom koje je ECTS bodovima propisano za uspješno svladavanje nastavnih obaveza.

Potrebno je definirati koje sve zahtjeve sustav mora zadovoljavati:
1. Da bi svaki korisnik mogao zasebno evidentirati te pregledavati svoje utrošeno vrijeme, sustav mora moći razlikovati između različitih korisnika. To se postiže tako da svaki korisnik ima na raspolaganju svoj vlastiti korisnički račun, te se sve evidencije koje on provodi implicitno vežu na njegov korisnički račun. Odnosno, potrebno je implementirati tipični sustav za prijavu, koji omogućuje korisnicima da se prijave na svoj korisnički račun uporabom korisničkog imena i lozinke, odnosno da naprave novi račun sa svim potrebnim podacima u slučaju ako već nemaju postojeći korisnički račun. Također je korisnicima potrebno omogućiti neke osnovne funkcionalnosti za mijenjanje postojećih korisničih podataka kao što su lozinka, e-mail, i slično.

2. Nakon što je korisnik prijavljen na sustav, mora moći evidentirati svoje utrošeno vrijeme. Evidencija vremena međutim mora biti na neki način vezana uz određenu aktivnost ili nastavnu obavezu. Nema smisla da korisnik samo evidentira utrošeno vrijeme, jer to može značiti da je vrijeme utrošeno na apsolutno bilo koji dio studija, a takve evidencije ne pružaju ikakvu informaciju vrijednu sakupljanja niti pregleda. Dakle, korisnik mora moći na neki (jednostavni) način u sustavu pronaći specifičnu aktivnost za koju želi evidentirati utrošenu vrijeme.

3. Također, korisniku je potrebno omogućiti pregled svog trenutačnog utrošenog vremena, i to na taj način da se može uspoređivati stvarno utrošeno vijeme korisnika sa vremenom koje je propisano ECTS bodovima, semestralnim opterećenjima, ili na bilo koji drugi način. Da bi to bilo moguće, potrebno je aktivnosti koje korisnik može evidentirati podijeliti na neki način u grupe i propisati im određene očekivane iznose utrošenog vremena koje bi one trebale iznositi. Korisnik bi trebao moći vidjeti ne samo koliko je vremena on utrošio na neku aktivnost, a koliko je 'trebao' utrošiti, nego i koliko je vremena utrošio na sve 'pod-aktivnosti' te aktivnosti (pošto neke aktivnosti implicitno obuhvaćaju druge aktivnosti!).

Web aplikacija podrazumijeva korištenje baze podataka. U ovom specifičnom slučaju, očito je da je baza podataka ključan dio cijelog sustava: sve evidencije moraju se negdje nalaziti, iznosi utrošenog vremena moraju negdje biti pohranjeni. Potrebno je modelirati bazu tako da omogućava podjelu i grupaciju aktivnosti i pod-aktivnosti na način koji omogućava korisnicima intuitivno korištenje web aplikacije.

Zadatak stvaranja baze podataka web aplikacije podrazumijeva dizajn sheme baze podataka. Potrebe korisnika igraju središnju ulogu u konstruiranju sheme. Početna faza dizajna baze podataka je opisati u potpunosti potrebe potencijalnih korisnika baze podataka. Ishod ove faze u složenijim aplikacijama može biti specifikacija zahtjeva korisnika. Nakon što su definirani svi zahtjevi, iz njih izvodi se konceptualni model baze podataka. 

Shema razvijena u ovoj konceptualnoj-fazi projektiranja predočuje detaljan pregled sustava. Model entitet-veza (engl. entity-relationship) obično se koristi za zastupanje konceptualnog dizajna. U takvom modelu konceptualna shema određuje objekte odnosno entitete koji su zastupljeni u bazi podataka, atribute njihovih entiteta, odnose među entitetima, te ograničenja na entitetima i vezama. Tipično, u konceptualnoj-fazi projektiranja stvara se dijagram ER modela koji pruža grafički prikaz sheme.
Fokus konceptualnog ER modela je prikaz objekata i veza između njih, a ne specifičnih detalja u vezi načina pohrane pojedinih tipova podataka.

Veći dio procesa dizajna baze podataka je odluka na koji način predstaviti razne vrste stvari, kao što su ljudi, mjesta, proizvodi, i slično. Pojam entitet se odnosi na bilo koju takvu jasno definiranu stavku. Naprimjer, u bazi podataka sveučilišta, primjeri entiteta uključuju djelatnika, studente, organizacijske jedinice, nastavne planove, predmete, itd. Različiti entiteti su međusobno povezani na različite načine, od kojih svi moraju na neki način biti predstavljeni u bazi podataka. Naprimjer, ako želimo u bazu spremiti podatak o tome koji od djelatnika predaje na kojem predmetu, trebamo definirati vezi između entiteta djelatnik i predmet.
U izradi sheme baze podataka, moramo osigurati da se izbjegnu dva glavna problema:
1. Redundancija: Loš dizajn baze podazaka može ponavljati iste informacije.
NEKI PRIMJER REDUNDANCIJE
2. Nepotpunost: loš dizajn baze može uzrokovati određene dijelove problema nemogućim modelirati.
NEKI PRIMJER NEPOTPUNOSTI

Dizajn baze podataka uglavnom uključuje dizajn sheme baze podataka. ER Model podataka je naširoko korišten model podataka za dizajn baze podataka. On pruža zgodan grafički prikaz podataka, odnos entiteta, veza, i njihovih ograničenja. ER model sastoji se od tipova entiteta (koji klasificiraju stvari od interesa) i navodi odnose koji mogu postojati između instanci tih tipova entiteta.

2. IZRADA ER MODELA

Izrada ER modela korak po korak:

Da bi omogućili korisnicima da se prijavljuju sa svojim korisničkim podacima, potrebno je u bazu dodati relaciju koja predstavlja korisnika i njegove korisničke podatke. U slučaju ove web aplikacije, nije potrebno puno komplicirati stvari, da bi se definirao korisnik potrebno je imati određeno korisničko ime po kojem se taj korisnik raspoznaje od drugih korisnika, potrebna je određena lozinka sa kojom se korisnik može prijaviti na sustav i koja onemogućuje drugim korisnicima (koji nisu on) da se prijave u njegovo ime, te također e-mail adresa, koja bi omogućila korisniku resetiranje lozinke (u slučaju da je zaboravi). Pošto za ovu web aplikaciju postoji razlika između običnih korisnika i korisnika sa većim privilegijama (moderatori, odnosno administratori), potrebno je također na neki način u bazi definirati koju razinu prava korisnik ima. To se obično radi sa cijelim brojem koji označava privilegije korisnika, u ovom slučaju:

--- TABLICA PRIVILEGIJA KORISNIKA ---

Lozinka korisnika je običan niz znakova, međutim spremiti je kao takvu u bazu je loša ideja! Na taj način bilo tko sa pristupom do baze ima pristup svim lozinkama korisnika te ih može zlouporabiti. Bolji način je enkriptirati lozinku te je takvu spremiti u bazu. Svaki puta kada se korisnik prijavljuje na sustav on unosi svoju lozinku koja se zatim ponovno kriptira, te se kriptirana verzija unešene lozinke uspoređuje sa onom koja se pohranila u bazu tijekom registracije tog korisnika. Na taj način i dalje je omogućena prijava korisnika, ali je sama lozinka sada sigurna. Moglo bi se otići korak dalje i dodati takozvani 'salt', da bi se daljnje povećala sigurnost lozinke, ali je to za ovakav sustav poprilično nepotrebno. Entitet 'Korisnik' bi izgledao otprilike ovako:

--- entitet KORISNIK (PRIRODNI KLJUČ) ---

Sljedeće što je potrebno napraviti je omogućiti prijavljenom korisniku da evidentira utrošeno vrijeme. Kako je ovo web aplikacija za evidenciju utrošenog vremena tijekom studija, potrebno je na neki način u bazi definirati sve aktivnosti koje je moguće evidentirati. Zato se definira entitet 'Aktivnost' koja predstavlja bilo koju aktivnost za koju se može evidentirati utrošeno vrijeme.
Svaka aktivnost ima određeno ime, naprimjer: '3. laboratorijska vježba iz predmeta Mrežno Programiranje'. Aktivnost također može imati datum početka i trajanje, te je potrebno definirati atribut 'Datum početka'. U slučaju laboratorijske vježbe očito je da ona ima datum početka te neko trajanje. Međutim, neke 'apstraktnije' aktivnosti ne trebaju nužno imati datum početka i trajanje, aktivnosti kao što su 'Učenje za međuispit iz predmeta Baze podataka', ili 'Izrada seminara iz predmeta Vještine komuniciranja'. U tom slučaju aktivnost neće imati datum početka, a to možemo u bazi predočiti sa vrijednošću NULL.

Trajanje aktivnosti može se interpretirati na više načina. U slučaju neke fiksne aktivnosti kao što je predavanje, naprimjer '5. predavanje iz predmeta Umjetna inteligencija', koje ima definiran i datum početka i trajanje, odabir trajanja je jednoznačan, trajanje će biti trajanje samog predavanje (npr. 3 sata). U slučaju aktivnosti koje nemaju definiran početak, nema smisla ni evidentirati trajanje pa je logično da trajanje također bude NULL. Međutim za aktivnosti koje nemaju fiksno trajanje, može postojati neko 'pretpostavljeno' ili 'očekivano' vrijeme trajanja. Naprimjer, voditelji nekog predmeta su definirali da će se kao dio nekog predmeta obrađivati seminar, odnosno svaki student treba izraditi seminar. U ovom slučaju je očito da je izrada seminara neko nepredviđeno vrijeme koje puno varira, ali upravo zato je zanimljivo evidentirati koliko je vremena utrošeno na seminar, te uspoređivati to vrijeme sa naprimjer prosjekom ili nekim vremenom koje je definirano od strane voditelja, ili predmeta, ili bilo koga. Zato se u slučaju nepostojećeg datuma početka (ili vrijednosti NULL), trajanje definira ili kao NULL, u slučaju kada ne postoji trajanje, ili kao neka vrijednost u slučaju kada postoji neki očekivani vremenski period trajanja te aktivnosti.

Vidljivo je da svaka aktivnost koja se može evidentirati je zapravo vezana na neki predmet. Zato je dobra ideja odvojiti ime predmeta iz naziva aktivnosti, te ga staviti u zasebnu relaciju u kojoj su definirani predmeti. Zatim se definira veza između relacije 'Aktivnost' i relacije 'Predmet' koja definira koja aktivnost pripada sklopu kojeg predmeta. Na taj način omogućuje se korisnicima lakši odabir aktivnosti koju žele evidentirati: prvo se može odabrati predmet, a zatim aktivnost tog predmeta, umjesto da su korisnici zatrpani sa tisućama mogućih aktivnosti, većinu od kojih ih uopće ne zanimaju.

Entitet predmet, osim samog naziva predmeta, treba sadržavati i godinu održavanja predmeta, pošto je očito da se isto predmeti mogu odravati više godina, a tijekom godinu mogu promijeniti svoje aktivnosti! Naprimjer jedne godine predmet 'Komunikacijske mreže' obuhvaća domaće zadaće, a sljedeće godine izbace domaće zadaće pa nadodaju projekt, i slično. Na taj način se isti predmet predavan u različitoj godini tretira kao potpuno različiti predmet. Osim toga svaki predmet ima definiran iznos ECTS bodova, koja zapravo definiraju koliko vremena bi student trebao potrošiti na ovaj predmet. Važnost ECTS bodova je očito ključna, ona omogućuje usporedbu stvarnog utrošenog vremena sa očekivanim utrošenim vremenom.

Kako definirati primarne ključeve ovih entitet? U slučaju predmeta obično postoji određena šifra koja jednoznačno definira predmet, a osim te šifre mogli bismo kao ključ koristiti kompozitni ključ 'Ime' predmeta i 'Godina', pošto ne postoji predmet koji se održava više puta iste godine. Međutim, u slučaju aktivnosti uistinu ne postoji prirodni ključ. Zbog tog razloga dobra ideja je kao primarni ključ aktivnosti postaviti surogatni ključ imena naprimjer 'ID'. Kako je lakše tijekom izrade web aplikacije koristiti primarne i strane ključeve koji nisu kompozitni, u relaciji predmet može se nadodati atribut šifra predmeta koji ga jednoznačno definira.

Relacije 'Aktivnost' i 'Predmet' i njihova veza bi mogle izgledati ovako:

--- entitet PREDMET I AKTIVNOST I VEZA IZMEĐU NJIH ---

Iz trenutačnog stanja modela, vidljivo je da se određene aktivnosti mogu dalje grupirati u cjeline. Trenutačno su grupirane po predmetima, što omogućuje pregled utrošenog vremena po predmetu, kao i po pojedinačnoj aktivnosti, međutim, određene aktivnosti predmeta očito su međusobno povezane. Aktivnost '1. laboratorijska vježba' i '2. laboratorijska vježba', obje iz predmeta 'Baze podataka', bi mogle oboje biti dio cjeline koja se zove 'laboratorijske vježbe'. Na ovaj način, korisnicima bi bilo još lakše evidentirati aktivnost: prvo bi se odabrao predmet, zatim grupa aktivnosti, zatim sama aktivnost. Osim toga, tijekom pregleda utrošenog vremena moglo bi se uspoređivati koliko je vremena utrošeno po grupama aktivnosti, što može predstavljati jako zanimljivu informaciju. Zato se definira nova entitet imena 'TipAktivnosti', koja definira sve moguće tipove aktivnost: predavanja, laboratorijske vježbe, domaće zadaće, seminari, ispiti, itd.
Zatim se svaka aktivnost preko veze povezuje sa odgovarajućim tipom aktivnosti. entitet 'TipAktivnosti' sama po sebi nije osobito zanimljiva: to je samo naziv tipa aktivnosti. Ova entitet sadrži relativno malen broj n-torki, broja sigurno manjeg od 100, pa nije loša ideja dodati primarni ključ 'ID', radi konzistentnosti.

Baza podataka do sada izgleda ovako:

--- entitet PREDMET, AKTIVNOST, i TIPAKTIVNOSTI, I NJHOVE VEZE (UMJETNI KLJUČEVI) ---

Sada kad je definirana struktura aktivnosti, treba omogućiti korisnicima da evidentiraju svoje utrošeno vrijeme, u bazi podataka se te evidencije moraju negdje spremati. Radi toga stvara se nova entitet 'Evidencija' koja predstavlja jednu evidenciju jednog korisnika za jednu aktivnosti. Da bi se to omogućilo očito je da evidencija kao atribute mora sadržavati strane ključeve korisnika i aktivnosti. Osim toga i samo utrošeno vrijeme mora biti pohranjeno, pa se definira atribut 'Trajanje' koji predstavlja utrošeno vrijeme za tu aktivnost. Dalje od interesa mogao bi biti datum unosa evidencije, te eventualno opis same evidencije, ukoliko je potreban. Za ovu relacije najbolji kandidat za prirodni primarni ključ jest skup atributa: 'KorisničkoIme', 'AktivnostID', te također 'DatumUnosa' pošto je moguće da jedan korisnik za istu aktivnost više put evidentira utrošeno vrijeme, naprimjer za predmet 'Završni rad' bi se tijekom cijelog semestra jedna aktivnost evidentirala više puta.

--- entitet EVIDENCIJA (PRIRODNI KLJUČ) ---

Prirodni ključ je kompozitan, i sastoji se od 3 atributa, ali moguće je dodati novi atribut 'ID' kao surogatni ključ, koji opet bitno olakšava rad web aplikacije. Baza bi u cijelosti izgledala ovako:

--- entitet AKTIVNOST; TIPAKTIVNOSTI, PREDMET, EVIDENCIJA, I KORISNIK, I NJIHOVE VEZE (UMJETNI KLJUČEVI) ---

Moguće je dalje poboljšati konceptualni model baze: trenutačno, da bi korisnik mogao evidentirati utrošeno vrijeme, mora prvo odabrati predmet, kojih može biti veoma mnogo. Čak i sa nekim načinom pretraživanja predmeta, korisnik mora tijekom svake evidencije birati 'svoj' predmet od svih mogućih predmeta (kojih može biti tisuće!). Bilo bi lijepo kada bi mogao imati neki predefinirani skup predmeta na koje je 'pretplaćen', te da mu se tijekom evidencija samo pokazuju ti predmeti. Zato se uvodi nova entitet 'Pretplata' koja omogućuje da je u bazi pohranjena informacija o tome koji korisnik trenutačno evidentira koji predmet. Na taj način korisnik može odabrati svoje predmete samo jednom prilikom naprimjer registracije ili početka novog semestra, a zatim tijekom semestra evidentira te pretplaćene predmete. Također je moguće izbrisati pretplatu iz baze, čime se korisnikova pretplata briše (naprimjer ako više ne želi evidentirati taj predmet, ili je semestar završen).

--- SVE OVO GORE + Pretplata

Trenutačno baza omogućava korisnicima intuitivan način evidencije utrošenog vremena, kao i sve podatke potrbene za pregled utrošeng vremena po predmetu, tipovima aktivnosti, kao i samim aktivnostima. Međutim, za svaki predmet se dodatno definiraju 'opterećenja'. To je iznos sati za određene skupove aktivnosti toga predmeta. Naprimjer za predmet 'Baze podataka' definirana su opterećenja:

--- TABLICA OPTEREĆENJA ZA BAZE PODATAKA ---

Ovo je jedna dodatna informacija koju je korisno pohraniti uz svaki predmet. Zato se na postojeći model može dodati nova entitet 'Opterećenje' koja definira koji predmet obuhvaća koje tipove aktivnosti, i koliko sati (odnosno ECTS bodova) svaki tip aktivnosti oduzima. Sada se prilikom pregleda statistike može uspoređivati utrošeno vrijeme po tipu aktivnosti, sa definiranim vremenom tipa aktivnosti (u slučaju da postoji definicija). Čak iako službeno za neki predmet ne postoji semestralno opterećenje za naprimjer tip aktivnosti 'laboratorisjke vježbe', prilikom dodavanja tog predmeta u bazu može se ručno podesiti koliko se vremena očekuje da će biti utrošeno na taj tip aktivnosti toga predmeta.

Konačni ER konceptualni model:

--- SLIKA CIJELOG ER KONCEPTUALNOG MODELA!!!! ---

3. Relacijski model

ER konceptualni model koristan je za grafički prikaz baze podataka i opis veza između entiteta. Međutim, stvarne baze podataka koje koriste web aplikacije (poput ove) su opisane relacijskom shemom. Potrebno je ER model baze pretvoriti u relacijski. To se radi u sljedećim koracima:

1. Entiteti u većini slučajeva se direktno preslikavaju u relacije
2. Atributi entiteta postaju atributi relacije
3. 







################
#WEB APLIKACIJA#
################

Web aplikacija za evidenciju utrošenog vremena tijekom studiranja sastoji se od sljedećih dijelova:
1. Profili - uključuje prijavu i odjavu korisnika, te registraciju novih korisnika
2. Predmeti - uključuje pretplate korisnika na predmete koje korisnici zatim mogu evidentirati, kao i dodavanje novih predmeta od strane korisnika za administratorskim privilegijama
3. Evidencija - omogućuje korisnicima da evidentiraju aktivnosti pretplaćenih predmeta
4. Statistika - omogućuje korisnicima pregled svog utrošenog vremena, kao i usporedba utrošenog vremena sa ostalim korisnicima i očekivanim utrošenim vremenom

1. PROFILI
2. PREDMETI
3. EVIDENCIJA

4. STATISTIKA

Ovaj dio web aplikacije omogućava prijavljenim korisnicima da pregledaju svoje trenutačno utrošeno vrijeme, te da ga uspoređuju sa drugim korisnicima kao i sa definiranim očekivanim utrošenim vremenom.

5. RAZVOJ I POBOLJŠANJE

##########################
#SQL KOD ZA BAZU PODATAKA#
##########################

CREATE TABLE Predmet
(
	ID INT IDENTITY(1,1) PRIMARY KEY,
	Ime NVARCHAR(100) NOT NULL,
	Godina NVARCHAR(20),
	ECTS INT CHECK (ECTS BETWEEN 0 and 180),
	CONSTRAINT UQ_Predmet UNIQUE (Ime, Godina)
);

CREATE TABLE TipAktivnosti
(
	ID INT IDENTITY(1,1) PRIMARY KEY,
	Ime NVARCHAR(100) NOT NULL UNIQUE
);

CREATE TABLE Opterecenje
(
	ID INT IDENTITY(1,1) PRIMARY KEY,
	PredmetID INT NOT NULL FOREIGN KEY REFERENCES Predmet(ID),
	TipAktivnostiID INT NOT NULL FOREIGN KEY REFERENCES TipAktivnosti(ID),
	Iznos FLOAT CHECK (Iznos BETWEEN 0 and 180)
);

CREATE TABLE Aktivnost
(
	ID INT IDENTITY(1,1) PRIMARY KEY,
	Ime NVARCHAR(100) NOT NULL,
	PredmetID INT NOT NULL FOREIGN KEY REFERENCES Predmet(ID),
	TipAktivnostiID INT NOT NULL FOREIGN KEY REFERENCES TipAktivnosti(ID),
	Termin DATETIME, 
	Trajanje INT, -- u minutama
);

CREATE TABLE Korisnik
(
	ID INT IDENTITY(1,1) PRIMARY KEY,
	KorisnickoIme NVARCHAR(100) NOT NULL UNIQUE,
	Lozinka BINARY(128) NOT NULL,
	Email NVARCHAR(100) NOT NULL,
	Uloga INT NOT NULL CHECK (Uloga BETWEEN 0 and 2)
);

CREATE TABLE Pretplata
(
	ID INT IDENTITY(1,1) PRIMARY KEY,
	KorisnikID INT NOT NULL FOREIGN KEY REFERENCES Korisnik(ID),
	PredmetID INT NOT NULL FOREIGN KEY REFERENCES Predmet(ID),
);

CREATE TABLE Evidencija
(
	ID INT IDENTITY(1,1) PRIMARY KEY,
	Trajanje INT NOT NULL, -- u minutama
	DatumUnosa DATETIME NOT NULL,
	KorisnikID INT NOT NULL FOREIGN KEY REFERENCES Korisnik(ID),
	AktivnostID INT NOT NULL FOREIGN KEY REFERENCES Aktivnost(ID)
);
